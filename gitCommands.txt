
Git commands cheatsheet :-

git init-----> powers your folder to be managed by git and initiates a new empty repository. 
               It also creates a .git folder that has all the relevant logic to manage versions of your project

rm -rf .git---> removes .git folder . If we don't want to track changes anymore by git.

There are 3 areas in which your file changes are done--->

1) Working area---> There can be bunch of files that are not currently handled by git.
                    It means that changes done or to be done in those files are not managed by git yet.
                    A file which is in working area is considered to be not in the staging area.
                    When we do `git status` and we see a bunch of `untracked files` then these are actually 
                    called to be in working area

2) Staging area----> What all files are going to be part of the next version that we will create.
                     This staging area is the place where git knows what changes will be done from the last version
                      to the next version.

3) Repository area---> This area actually contains the details of all your previous registered versions.
                       And the files in this area, git already manages them and knows their version history.



 `git add <file_name>`----> moving untracked files from the working area to the staging area

 `git rm --cached <file_name>----> moving files from staging area back to working area

 `commit '----> is a particular version of the project.It captures a snapshot of the project's staged changes and creates a version out of it.

`git clone`----> cloning repositoryy on our local machine
               git clone <some link>

'git commit'----> it will open vim editor
                  press i and type the commit message 
                  press esc the colon to save the changes 
                  press wq to exit the vim editor.

'git log`----> this command list all the commits and details about them.(every commit have unique commit id using we can go back to that
               particular commit.

`git restore <file_name>' ----> it removes all files changes from the statging area to be committed.
                                This can be useful if did some dirty piece of code and now no more want it.
                                Instead of deleting every change line by line, we can restore it or you can say last clean version of 
                                the files can be restored.

git restore --staged <file_name>

ls --> list the files in current directory
la -a ---> list all the files (hidden files also)


git push---> upload local repo content to remote repo
            git push origin main
